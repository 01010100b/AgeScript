#define _PRODUCTION_MAX_COMMANDS 16
#define _PRODUCTION_BUILDING 1
#define _PRODUCTION_TRAINING 2
#define _PRODUCTION_RESEARCH 3

Globals:

Int[_PRODUCTION_MAX_COMMANDS] _Production_Commands
Int[_PRODUCTION_MAX_COMMANDS] _Production_Parameters
Int _Production_NextCommand

// Priority between 0 and 1000

Function Void Production_TickStart():

Int i

for i 0.._Production_Commands.Length
	_Production_Commands[i] = -1
	_Production_Parameters[i] = -1
endfor

_Production_NextCommand = 0

Function Void Production_TickEnd():

Int i
Int j
Int[4] resources
Int[4] cost
Int command
Int parameter
Int id
Int type
Bool blocking
Int[2] point
Bool can_afford

if LessThanOrEquals(_Production_NextCommand, 0)
	return
endif

if GreaterThan(_Production_NextCommand, 1)
	_Production_Sort()
endif

resources[RESOURCE_FOOD] = GetPlayerFact(-1, FACT_FOOD_AMOUNT, 0)
resources[RESOURCE_WOOD] = GetPlayerFact(-1, FACT_WOOD_AMOUNT, 0)
resources[RESOURCE_STONE] = GetPlayerFact(-1, FACT_STONE_AMOUNT, 0)
resources[RESOURCE_GOLD] = GetPlayerFact(-1, FACT_GOLD_AMOUNT, 0)

for i 0.._Production_NextCommand
	command = _Production_Commands[i]
	parameter = _Production_Parameters[i]
	
	command = Div(command, 1000)
	j = Mod(command, 2)
	command = Div(command, 2)
	type = Mod(command, 4)
	command = Div(command, 4)
	id = command
	point[1] = Mod(parameter, 10000)
	parameter = Div(parameter, 10000)
	point[0] = parameter
	blocking = false
	
	if Equals(j, 1)
		blocking = true
	endif
	
	if Equals(type, _PRODUCTION_RESEARCH)
		
	else
		cost = GetObjectCost(id)
	endif
	
	can_afford = true
	
	for j 0..4
		if GreaterThan(cost[j], resources[j])
			can_afford = false
		endif
	endfor
	
	if can_afford
		if Equals(type, _PRODUCTION_TRAINING)
			if CanTrain(false, id)
				Train(false, id)
			endif
		elif Equals(type, _PRODUCTION_BUILDING)
			if CanBuildLine(false, point, id)
				BuildLine(point, id)
			endif
		elif Equals(type, _PRODUCTION_RESEARCH)
		
		endif
	endif
	
	if Or(can_afford, blocking)
		for j 0..4
			resources[j] = Sub(resources[j], cost[j])
		endfor
	endif
	
endfor

Function Void Production_Build(Int building, Int[2] point, Int priority, Bool blocking):

Int command
Int parameter

if GreaterThanOrEquals(_Production_NextCommand, _PRODUCTION_MAX_COMMANDS)
	return
endif

command = building
command = Mul(command, 4)
command = Add(command, _PRODUCTION_BUILDING)
command = Mul(command, 2)

if blocking
	command = Add(command, 1)
endif

command = Mul(command, 1000)
command = Add(command, priority)

parameter = point[0]
parameter = Mul(parameter, 10000)
parameter = Add(parameter, point[1])

_Production_Commands[_Production_NextCommand] = command
_Production_Parameters[_Production_NextCommand] = parameter
_Production_NextCommand = Add(_Production_NextCommand, 1)

Function Void Production_Train(Int unit, Int priority, Bool blocking):

Int command

if GreaterThanOrEquals(_Production_NextCommand, _PRODUCTION_MAX_COMMANDS)
	return
endif

command = unit
command = Mul(command, 4)
command = Add(command, _PRODUCTION_TRAINING)
command = Mul(command, 2)

if blocking
	command = Add(command, 1)
endif

command = Mul(command, 1000)
command = Add(command, priority)

_Production_Commands[_Production_NextCommand] = command
_Production_Parameters[_Production_NextCommand] = -1
_Production_NextCommand = Add(_Production_NextCommand, 1)

Function Void _Production_Sort():

Int priority1
Int priority2
Bool changed
Int i
Int j
Int temp

changed = true

while changed
	changed = false
	
	for i 1.._Production_NextCommand
		j = Sub(i, 1)
		priority1 = Mod(_Production_Commands[j], 1000)
		priority2 = Mod(_Production_Commands[i], 1000)
		
		if LessThan(priority1, priority2)
			temp = _Production_Commands[j]
			_Production_Commands[j] = _Production_Commands[i]
			_Production_Commands[i] = temp
			temp = _Production_Parameters[j]
			_Production_Parameters[j] = _Production_Parameters[i]
			_Production_Parameters[i] = temp
			changed = true
		endif
		
	endfor
	
endwhile
