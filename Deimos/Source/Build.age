Function Int[2] Build_GetPoint(Int building_id, Int[2] point, Int distance, Int min_distance, Int flags):

Int attempt
Int max_attempts
Int delta
Int max_delta
Int[2] test_point
Int[2] build_point
Int test_distance

build_point[0] = -1
build_point[1] = -1
max_attempts = 100

if LessThanOrEquals(distance, 3)
	max_attempts = 20
endif

max_delta = Mul(distance, 2)
max_delta = Add(max_delta, 1)

for attempt 0..max_attempts
	delta = GetRandom(max_delta)
	test_point[0] = Sub(point[0], distance)
	test_point[0] = Add(test_point[0], delta)
	delta = GetRandom(max_delta)
	test_point[1] = Sub(point[1], distance)
	test_point[1] = Add(test_point[1], delta)
	test_distance = GetPointDistance(point, test_point)
	
	if LessThan(test_distance, min_distance)
		continue
	endif
	
	if LessThanOrEquals(test_distance, distance)
	
		if CanBuildLine(true, test_point, building_id)
			build_point = test_point
		endif
		
	endif
	
endfor

return build_point

Function Int[2] Build_GetDropsitePoint(Int dropsite_id, Int[2] point, Int distance, Int resource):
// point and distance define a region in which the dropsite may be placed

Int[2] build_point
Int[4] search_state
Int index
Int attempt

build_point[0] = -1
build_point[1] = -1
SetTargetPoint(point)
FullResetSearch()
FilterDistance(-1, distance)

if Equals(resource, RESOURCE_WOOD)
	FilterStatus(STATUS_READY, LIST_ACTIVE)
else
	FilterStatus(STATUS_RESOURCE, LIST_ACTIVE)
endif

search_state = FindResource(resource, 100)

if LessThanOrEquals(search_state[SEARCH_REMOTE_TOTAL], 0)
	return build_point
endif

if Equals(resource, RESOURCE_WOOD)
	
	if LessThanOrEquals(search_state[SEARCH_REMOTE_TOTAL], 30)
		return build_point
	endif
	
	CleanSearch(SEARCH_REMOTE, OBJECT_DATA_DISTANCE, SEARCH_ORDER_ASC)
	RemoveObjects("<", SEARCH_REMOTE, OBJECT_DATA_INDEX, 10)
endif

for attempt 0..20
	index = GetRandom(search_state[SEARCH_REMOTE_TOTAL])
	SetTargetObject(SEARCH_REMOTE, index)
	point = GetPoint(POSITION_OBJECT)
	
	for distance 0..4
		build_point = Build_GetPoint(dropsite_id, point, distance, 0, 0)
		
		if GreaterThanOrEquals(build_point[0], 0)
			return build_point
		endif
		
	endfor
	
endfor

return build_point

Function Int[2] Build_GetFarmPoint(Int max_distance):

Int[4] search_state
Int delta
Int[2] point
Int[2] from
Int[2] to
Int[2] test_point
Int i
Int d
Int[2] build_point

build_point[0] = -1
build_point[1] = -1
FullResetSearch()
search_state = FindLocal(TOWN_CENTER, 240)
search_state = FindLocal(MILL, 240)

if LessThanOrEquals(search_state[SEARCH_LOCAL_TOTAL, 0)
	return build_point
endif

for i 0..search_state[SEARCH_LOCAL_TOTAL]
	SetTargetObject(SEARCH_LOCAL, i)
	point = GetPoint(POSITION_OBJECT)
	
	for delta 0..max_distance
		from[0] = Sub(point[0], delta)
		from[1] = Sub(point[1], delta)
		to[0] = Add(point[0], delta)
		to[1] = Add(point[1], delta)
		
		for d from[0]..to[0]
			test_point[0] = d
			test_point[1] = from[1]
			build_point = Build_GetPoint(FARM, test_point, 0, 0, 0)
			
			if GreaterThanOrEquals(build_point[0], 0)
				return build_point
			endif
			
			test_point[1] = to[1]
			build_point = Build_GetPoint(FARM, test_point, 0, 0, 0)
			
			if GreaterThanOrEquals(build_point[0], 0)
				return build_point
			endif
			
		endfor
		
		for d from[1]..to[1]
			test_point[1] = d
			test_point[0] = from[0]
			build_point = Build_GetPoint(FARM, test_point, 0, 0, 0)
			
			if GreaterThanOrEquals(build_point[0], 0)
				return build_point
			endif
			
			test_point[0] = to[0]
			build_point = Build_GetPoint(FARM, test_point, 0, 0, 0)
			
			if GreaterThanOrEquals(build_point[0], 0)
				return build_point
			endif
			
		endfor
		
	endfor
	
endfor

return build_point
